{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my notes \u00b6 Hi!! This is Shadab, Programs on C are given below, Introduction to C \u00b6 Exercise 1 - use of pointers in C Exercise 2 - strings in C Exercise 3 - Structures and Union in C Exercise 4 - Dynamic Memory Allocation in C Exercise 5 - files using C Exercise 6 - preprocessor directives Exercise 7 - Patterns using * in C","title":"Welcome to my notes"},{"location":"#welcome-to-my-notes","text":"Hi!! This is Shadab, Programs on C are given below,","title":"Welcome to my notes"},{"location":"#introduction-to-c","text":"Exercise 1 - use of pointers in C Exercise 2 - strings in C Exercise 3 - Structures and Union in C Exercise 4 - Dynamic Memory Allocation in C Exercise 5 - files using C Exercise 6 - preprocessor directives Exercise 7 - Patterns using * in C","title":"Introduction to C"},{"location":"Introduction%20to%20C/Exercise-1/","text":"Exercise - 1 \u00b6 To demonstrate use of pointers in C. \u00b6 1. Write a function which takes hours, minutes and seconds as parameters and an integers and increments the time by s seconds. Accept time and seconds in main and Display the new time in main using the above function. \u00b6 Program \u00b6 #include <stdio.h> void time ( int * h , int * m , int * s , int sec ); int main () { int hr , mi , se , sec ; printf ( \" \\n Enter the time in Hour, Minute & Seconds n\" ); scanf ( \"%d%d%d\" , & hr , & mi , & se ); printf ( \" \\n Enter the new seconds n\" ); scanf ( \"%d\" , & sec ); printf ( \" \\n Old Time is %d:%d:%d\" , hr , mi , se ); time ( & hr , & mi , & se , sec ); // nNew Time is %d:%d:%d\",hr,mi,se); } void time ( int * h , int * m , int * s , int sec ) { { * s = * s + sec ; if ( * s >= 60 ) { { * m = * m + ( * s / 60 ); * s = * s % 60 ; } } if ( * m >= 60 ) { { * h = * h + ( * m / 60 ); * m = * m % 60 ; } } if ( * h == 24 ) { { * h = 0 ; } } if ( * h > 24 ) { { * h = * h % 24 ; } } printf ( \" \\n New Time is %d:%d:%d\" , h , m , s ); } } Enter the time in Hour, Minute & Seconds: Enter the time in Hour, Minute & Seconds: 2 45 502 45 50 Enter the new seconds: 20 Enter the new seconds: 20 Old Time is: 2 Old Time is: 2:: 4545:: 5050 New Time is: New Time is:2 :46 :2 :46 :1010 2. Write a program to display the elements of an array containing n integers in the reverse order using a pointer to the array. \u00b6 Program \u00b6 #include <stdio.h> void main () { int n , i , array [ 10 ]; int * ptr ; ptr = & array [ 0 ]; printf ( \"enter size of array\" ); scanf ( \"%d\" , & n ); printf ( \"enter values in array\" ); for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , ptr ); ptr ++ ; } ptr = & array [ n - 1 ]; printf ( \"array in reverse order\" ); for ( i = n - 1 ; i >= 0 ; i -- ) { printf ( \"%d \" , * ptr ); ptr -- ; } } 3. Write a program to allocate memory dynamically for n integers such that the memory is initialized to 0. Accept the data from the user and find the range of the data elements. \u00b6 Program \u00b6 #include <stdio.h> #include <stdlib.h> main () { int * p , i , n , max , min ; printf ( \" nEnter the limit : \" ); scanf ( \"%d\" , & n ); p = ( int * ) calloc ( n , sizeof ( int )); printf ( \"Enter the data : \" ); for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , p + i ); printf ( \" n Entered Series is : \" ); for ( i = 0 ; i < n ; i ++ ) printf ( \" t %d\" , * ( p + i )); min = * ( p + 0 ); for ( i = 1 ; i < n ; i ++ ) if ( min > * ( p + i )) { { min = * ( p + i ); } } max = * ( p + 0 ); for ( i = 1 ; i < n ; i ++ ) { { if ( max < * ( p + i )) { { max = * ( p + i ); } } } } printf ( \" \\n Range of the Given Series is %d TO %d \\n \" , min , max ); } 4.Write a Program to swap two numbers by using pointer. \u00b6 Program \u00b6 #include <stdio.h> #include <stdlib.h> main () { int a = 10 , b = 20 ; void swap1 ( int x , int y ); void swap2 ( int * ptr1 , int * ptr2 ); printf ( \"Before swapping a = %d, b = %d\" , a , b ); swap ( a , b ); printf ( \"After swapping pointer a = %d, b = %d\" , a , b ); } int swap ( int * ptr1 , int * ptr2 ) { int temp ; temp = * ptr1 ; * ptr1 = * ptr2 ; * ptr2 = temp ; } 5. Accept n integers in array A. Pass this array and two counter variables to a function which will set the first counter to the total number of even values in the array and the other to the total number of odd values. Display these counts in main. (Hint: Pass the addresses of the counters to the function) \u00b6 Program \u00b6 #include <stdio.h> #include <conio.h> #define max 20 void count ( int a [ max ], int * od , int * ev ) { int n , i ; printf ( \" nEnter the Number of elements in array n\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); if ( a [ i ] % 2 == 0 ) * ev ++ ; else * od ++ ; } } void main () { int a [ max ], odd = 0 , even = 0 ; clrscr (); count ( a , & odd , & even ); printf ( \" \\n Even number from array is %d \" , even ); printf ( \" \\n Odd number from array is %d \" , odd ); getch (); } 6. Write a function which accepts a number and three flags as parameters. If the number is even, set the first flag to 1. If the number is prime, set the second flag to 1. If the number is divisible by 3 or 7, set the third flag to 1. In main, accept an i nteger and use this function to check if it is even, prime and divisible by 3 or 7. (Hint : pass the addresses of flags to the function) \u00b6 Program \u00b6 #include <stdio.h> void main () { int * even ( int * , int * ); int * prime ( int * , int * ); int * division ( int * , int * ); int n , flag1 = 0 , flag2 = 0 , flag3 = 0 ; int * value1 , * value2 , * value3 ; printf ( \"Enter a number\" ); scanf ( \"%d\" , & n ); value1 = even ( & n , & flag1 ); printf ( \" \\n flag1=%d \\n \" , * value1 ); value2 = prime ( & n , & flag2 ); printf ( \" \\n flag2=%d \\n \" , * value2 ); value3 = division ( & n , & flag3 ); printf ( \" \\n flag3=%d \\n \" , * value3 ); } int * even ( int * ptr1 , int * ptr2 ) { if ( * ptr1 % 2 == 0 ) { printf ( \"number is even\" ); * ptr2 = 1 ; return ( ptr2 ); } else printf ( \"number is odd\" ); return ( ptr2 ); } int * prime ( int * ptr1 , int * ptr2 ) { int i , n = * ptr1 ; for ( i = 2 ; i <= n ; i ++ ) { if ( * ptr1 % i == 0 ) { printf ( \"number is not prime\" ); return ( ptr2 ); } else printf ( \"number is prime\" ); * ptr2 = 1 ; return ( ptr2 ); } } int * division ( int * ptr1 , int * ptr2 ) { if ( * ptr1 % 3 == 0 || * ptr1 % 7 == 0 ) { printf ( \"number is divisible by 3 or 7\" ); * ptr2 = 1 ; return ( ptr2 ); } else printf ( \"number is not divisible by 3 or 7\" ); return ( ptr2 ); }","title":"Exercise - 1"},{"location":"Introduction%20to%20C/Exercise-1/#exercise-1","text":"","title":"Exercise - 1"},{"location":"Introduction%20to%20C/Exercise-1/#to-demonstrate-use-of-pointers-in-c","text":"","title":"To demonstrate use of pointers in C."},{"location":"Introduction%20to%20C/Exercise-1/#1-write-a-function-which-takes-hours-minutes-and-seconds-as-parameters-and-an-integers-and-increments-the-time-by-s-seconds-accept-time-and-seconds-in-main-and-display-the-new-time-in-main-using-the-above-function","text":"","title":"1. Write a function which takes hours, minutes and seconds as parameters and an integers and increments the time by s seconds. Accept time and seconds in main and Display the new time in main using the above function."},{"location":"Introduction%20to%20C/Exercise-1/#program","text":"#include <stdio.h> void time ( int * h , int * m , int * s , int sec ); int main () { int hr , mi , se , sec ; printf ( \" \\n Enter the time in Hour, Minute & Seconds n\" ); scanf ( \"%d%d%d\" , & hr , & mi , & se ); printf ( \" \\n Enter the new seconds n\" ); scanf ( \"%d\" , & sec ); printf ( \" \\n Old Time is %d:%d:%d\" , hr , mi , se ); time ( & hr , & mi , & se , sec ); // nNew Time is %d:%d:%d\",hr,mi,se); } void time ( int * h , int * m , int * s , int sec ) { { * s = * s + sec ; if ( * s >= 60 ) { { * m = * m + ( * s / 60 ); * s = * s % 60 ; } } if ( * m >= 60 ) { { * h = * h + ( * m / 60 ); * m = * m % 60 ; } } if ( * h == 24 ) { { * h = 0 ; } } if ( * h > 24 ) { { * h = * h % 24 ; } } printf ( \" \\n New Time is %d:%d:%d\" , h , m , s ); } } Enter the time in Hour, Minute & Seconds: Enter the time in Hour, Minute & Seconds: 2 45 502 45 50 Enter the new seconds: 20 Enter the new seconds: 20 Old Time is: 2 Old Time is: 2:: 4545:: 5050 New Time is: New Time is:2 :46 :2 :46 :1010","title":"Program"},{"location":"Introduction%20to%20C/Exercise-1/#2-write-a-program-to-display-the-elements-of-an-array-containing-n-integers-in-the-reverse-order-using-a-pointer-to-the-array","text":"","title":"2. Write a program to display the elements of an array containing n integers in the reverse order using a pointer to the array."},{"location":"Introduction%20to%20C/Exercise-1/#program_1","text":"#include <stdio.h> void main () { int n , i , array [ 10 ]; int * ptr ; ptr = & array [ 0 ]; printf ( \"enter size of array\" ); scanf ( \"%d\" , & n ); printf ( \"enter values in array\" ); for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , ptr ); ptr ++ ; } ptr = & array [ n - 1 ]; printf ( \"array in reverse order\" ); for ( i = n - 1 ; i >= 0 ; i -- ) { printf ( \"%d \" , * ptr ); ptr -- ; } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-1/#3-write-a-program-to-allocate-memory-dynamically-for-n-integers-such-that-the-memory-is-initialized-to-0-accept-the-data-from-the-user-and-find-the-range-of-the-data-elements","text":"","title":"3. Write a program to allocate memory dynamically for n integers such that the memory is initialized to 0. Accept the data from the user and find the range of the data elements."},{"location":"Introduction%20to%20C/Exercise-1/#program_2","text":"#include <stdio.h> #include <stdlib.h> main () { int * p , i , n , max , min ; printf ( \" nEnter the limit : \" ); scanf ( \"%d\" , & n ); p = ( int * ) calloc ( n , sizeof ( int )); printf ( \"Enter the data : \" ); for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , p + i ); printf ( \" n Entered Series is : \" ); for ( i = 0 ; i < n ; i ++ ) printf ( \" t %d\" , * ( p + i )); min = * ( p + 0 ); for ( i = 1 ; i < n ; i ++ ) if ( min > * ( p + i )) { { min = * ( p + i ); } } max = * ( p + 0 ); for ( i = 1 ; i < n ; i ++ ) { { if ( max < * ( p + i )) { { max = * ( p + i ); } } } } printf ( \" \\n Range of the Given Series is %d TO %d \\n \" , min , max ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-1/#4write-a-program-to-swap-two-numbers-by-using-pointer","text":"","title":"4.Write a Program to swap two numbers by using pointer."},{"location":"Introduction%20to%20C/Exercise-1/#program_3","text":"#include <stdio.h> #include <stdlib.h> main () { int a = 10 , b = 20 ; void swap1 ( int x , int y ); void swap2 ( int * ptr1 , int * ptr2 ); printf ( \"Before swapping a = %d, b = %d\" , a , b ); swap ( a , b ); printf ( \"After swapping pointer a = %d, b = %d\" , a , b ); } int swap ( int * ptr1 , int * ptr2 ) { int temp ; temp = * ptr1 ; * ptr1 = * ptr2 ; * ptr2 = temp ; }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-1/#5-accept-n-integers-in-array-a-pass-this-array-and-two-counter-variables-to-a-function-which-will-set-the-first-counter-to-the-total-number-of-even-values-in-the-array-and-the-other-to-the-total-number-of-odd-values-display-these-counts-in-main-hint-pass-the-addresses-of-the-counters-to-the-function","text":"","title":"5. Accept n integers in array A. Pass this array and two counter variables to a function which will set the first counter to the total number of even values in the array and the other to the total number of odd values. Display these counts in main. (Hint: Pass the addresses of the counters to the function)"},{"location":"Introduction%20to%20C/Exercise-1/#program_4","text":"#include <stdio.h> #include <conio.h> #define max 20 void count ( int a [ max ], int * od , int * ev ) { int n , i ; printf ( \" nEnter the Number of elements in array n\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); if ( a [ i ] % 2 == 0 ) * ev ++ ; else * od ++ ; } } void main () { int a [ max ], odd = 0 , even = 0 ; clrscr (); count ( a , & odd , & even ); printf ( \" \\n Even number from array is %d \" , even ); printf ( \" \\n Odd number from array is %d \" , odd ); getch (); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-1/#6-write-a-function-which-accepts-a-number-and-three-flags-as-parameters-if-the-number-is-even-set-the-first-flag-to-1-if-the-number-is-prime-set-the-second-flag-to-1-if-the-number-is-divisible-by-3-or-7-set-the-third-flag-to-1-in-main-accept-an-i-nteger-and-use-this-function-to-check-if-it-is-even-prime-and-divisible-by-3-or-7-hint-pass-the-addresses-of-flags-to-the-function","text":"","title":"6. Write a function which accepts a number and three flags as parameters. If the number is even, set the first flag to 1. If the number is prime, set the second flag to 1. If the number is divisible by 3 or 7, set the third flag to 1. In main, accept an i nteger and use this function to check if it is even, prime and divisible by 3 or 7. (Hint : pass the addresses of flags to the function)"},{"location":"Introduction%20to%20C/Exercise-1/#program_5","text":"#include <stdio.h> void main () { int * even ( int * , int * ); int * prime ( int * , int * ); int * division ( int * , int * ); int n , flag1 = 0 , flag2 = 0 , flag3 = 0 ; int * value1 , * value2 , * value3 ; printf ( \"Enter a number\" ); scanf ( \"%d\" , & n ); value1 = even ( & n , & flag1 ); printf ( \" \\n flag1=%d \\n \" , * value1 ); value2 = prime ( & n , & flag2 ); printf ( \" \\n flag2=%d \\n \" , * value2 ); value3 = division ( & n , & flag3 ); printf ( \" \\n flag3=%d \\n \" , * value3 ); } int * even ( int * ptr1 , int * ptr2 ) { if ( * ptr1 % 2 == 0 ) { printf ( \"number is even\" ); * ptr2 = 1 ; return ( ptr2 ); } else printf ( \"number is odd\" ); return ( ptr2 ); } int * prime ( int * ptr1 , int * ptr2 ) { int i , n = * ptr1 ; for ( i = 2 ; i <= n ; i ++ ) { if ( * ptr1 % i == 0 ) { printf ( \"number is not prime\" ); return ( ptr2 ); } else printf ( \"number is prime\" ); * ptr2 = 1 ; return ( ptr2 ); } } int * division ( int * ptr1 , int * ptr2 ) { if ( * ptr1 % 3 == 0 || * ptr1 % 7 == 0 ) { printf ( \"number is divisible by 3 or 7\" ); * ptr2 = 1 ; return ( ptr2 ); } else printf ( \"number is not divisible by 3 or 7\" ); return ( ptr2 ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/","text":"Exercise - 2 \u00b6 To demonstrate use of strings in C. \u00b6 1. Write a menu driven program to perform the following operations on strings using standard library functions : \u00b6 Length \u00b6 Copy \u00b6 Concatenation \u00b6 Compare \u00b6 Reverse \u00b6 Uppercase \u00b6 Lowercase \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> void main () { char str [ 20 ], str1 [ 20 ]; int ch , l ; char rev , upr , lwr ; printf ( \"Menu \\n 1.Length \\n 2.Copy \\n 3.Concatenation \\n 4.Compare \\n 5. Reverse \\n 6.Uppercase \\n 7. Lowercase \\n \" ); printf ( \"enter option:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); l = strlen ( str ); printf ( \" \\n Length of string=%d\" , l ); break ; case 2 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); strcpy ( str1 , str ); printf ( \" \\n After copy String str1=%s\" , str1 ); break ; case 3 : printf ( \" \\n Enter the First string:\" ); scanf ( \"%s\" , & str ); printf ( \" \\n Enter the Second string:\" ); scanf ( \"%s\" , & str1 ); strcat ( str , str1 ); printf ( \" \\n After Concat String str=%s\" , str ); break ; case 4 : printf ( \" \\n Enter the First string:\" ); scanf ( \"%s\" , & str ); printf ( \" \\n Enter the Second string:\" ); scanf ( \"%s\" , & str1 ); l = strcmp ( str , str1 ); if ( l == 0 ) printf ( \" \\n Both are equal\" ); else printf ( \" \\n Both are Different\" ); break ; case 5 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); rev = strrev ( str ); printf ( \"\\Reverse of the string=%d\" , rev ); break ; case 6 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); upr = strupr ( str ); printf ( \" \\n Uppercase of the string=%d\" , upr ); break ; case 7 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); lwr = strlwr ( str ); printf ( \" \\n Lowercase of the string=%d\" , lwr ); break ; } } 2. Write a program that will accept a string and character to search. The program will call a function, which will search for the occurrence position of the character in the call a function, which will search for the occurrence position of the character in the string and return its position. Function should return string and return its position. Function should return \u2013\u20131 1 if the character is not found in if the character is not found in the string \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> int search ( char * str , char c ); void main () { char str [ 20 ], ch ; int pos ; printf ( \"Enter the character:\" ); scanf ( \"%c\" , & ch ); printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , str ); pos = search ( str , ch ); if ( pos == -1 ) printf ( \" \\n Character Not Found\" ); else printf ( \" \\n Character Found at %d position\" , pos + 1 ); } int search ( char * str , char c ) { int i ; for ( i = 0 ; i < strlen ( str ); i ++ ) { if ( c == str [ i ]) return i ; // i++; else { return -1 ; } } } OUTPUT************************* Enter the character:v Enter the string: vcacs Character Found at 1 position 3. A palindrome is a string that reads the same3.A palindrome is a string that reads the same-- forward and reverse.forward and reverse.ExampleExample : : \"madam\" is a Palindrome.Write a function which accepts a string and returns 1 if the \"madam\" is a Palindrome.Write a function which accepts a string and returns 1 if the string is a palindrome and0 otherwise.Use thstring is a palindrome and0 otherwise.Use this function in main. \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> int main () { int len = 0 , i = 0 , flag = 1 ; char str [ 10 ]; printf ( \"enter string:\" ); scanf ( \"%s\" , str ); len = strlen ( str ); while ( i < len / 2 ) { if ( str [ i ] != str [ len - i - 1 ]) { flag = 0 ; break ; } i ++ ; } if ( flag == 0 ) { printf ( \"string is not palindrome\" ); } else { printf ( \"string is palindrome\" ); } } 4.For the following standard functions, write corresponding user defined functions and write a menu driven program to use them. Strlen, strrev, strupr, strlwr, strcat, strcmp \u00b6 Program \u00b6 #include <stdio.h> #include <conio.h> void length ( char * s ) { { int i = 0 ; int i = 0 ; while ( s [ i ] != '\\0' ) { { i ++ ; } } printf ( \" \\n Length of string = %d\" , i ); } } void reverse ( char * s ) { { int i = 0 , j = 0 ; char * str ; while ( s [ i ] != '\\0' ) { { i ++ ; } } i -- ; while ( i >= 0 ) { { str [ j ] = s [ i -- ]; j ++ ; } } str [ j ] = '\\0' ; printf ( \" \\n After reverse string = %s \" , str ); } } void upper ( char * s ) { { int i = 0 ; while ( s [ i ] != '\\0' ) { { if ( s [ i ] >= 97 && s [ i ] <= 122 ) { { s [ i ] = s [ i ] - 32 ; } } i ++ ; } } printf ( \" \\n Upper of string = %s \" , s ); } } void lower ( char * s ) { { int i = 0 ; while ( s [ i ] != '\\0' ) { { if ( s [ i ] >= 65 && s [ i ] <= 90 ) { { s [ i ] = s [ i ] + 32 ; } } i ++ ; } } printf ( \" \\n Lower of string = %s \" , s ); } } void compare ( char * s1 , char * s2 ) { int i = 0 , count = 0 ; while ( s1 [ i ] != '\\0' && s2 [ i ] != '\\0' ) { if ( s1 [ i ] != s2 [ i ]) { count = 0 ; break ; } else count = 1 ; i ++ ; } if ( count == 1 ) printf ( \" \\n Strings are equal\" ); else printf ( \" \\n Strings are different\" ); } void concat ( char * s1 , char * s2 ) { int i = 0 , j = 0 ; while ( s1 [ i ] != '\\0' ) { i ++ ; } i -- ; while ( s2 [ j ] != '\\0' ) { s1 [ i ] = s2 [ j ]; j ++ ; } s1 [ i ] = '\\0' ; //assign last element null^M printf ( \" \\n After concate s1=%s\" , s1 ); } void main () { char * str , * str2 ; int ch ; printf ( \"Enter the String\" ); scanf ( \"%s\" , str ); printf ( \"Enter the String 2\" ); scanf ( \"%s\" , str2 ); do { { printf ( \" \\n MenunMenu \\n 1.Length \\n 2.Reverse \\n 3.Uppercase \\n 4.Lowercase \\n 5.Concat \\n 6.Compare \\n 7.Exit \\n \" ); scanf ( \"%d\" , & ch ); switch ( ch ) { { case 1 : length ( str ); break ; case 2 : reverse ( str ); break ; case 3 : upper ( str ); break ; case 4 : lower ( str ); break ; case 5 : concat ( str , str2 ); break ; case 6 : compare ( str , str2 ); break ; case 7 : printf ( \"\" ); break ; } } } } while ( ch != 6 ); { getch (); } } 5. Write a program which accepts a sentence from the user and alters it as follows : Every space is replaced by *, case of all alphabets is reversed, digits are replaced by ? \u00b6 Program \u00b6 #include <stdio.h> void main () { char s [ 80 ], * c ; int i = -1 ; clrscr (); printf ( \" \\n Enter the sentencenEnter the sentence \\n \" ); while ( s [ i ] != '\\n' ) { { i ++ ; scanf ( \"%c\" , & s [ i ]); } } i = 0 ; while ( s [ i ] != '\\n' ) { { if ( s [ i ] == ' ' ) { { c [ i ] = '*' ; } } else if ( s [ i ] <= '9' && s [ i ] >= '0' ) { { c [ i ] = '?' ; } } else if ( s [ i ] <= 'z' && s [ i ] >= 'a' ) { { c [ i ] = s [ i ] - 32 ; 32 ; } } else if ( s [ i ] <= 'Z' && s [ i ] >= 'A' ) { { c [ i ] = s [ i ] + 32 ; } } else { { c [ i ] = s [ i ]; } } i ++ ; } c [ i ] = '\\0' ; printf ( \" \\n ans = %s \" , c ); } } ``` ``` output Enter the sentence : HELLO all 178 students : HELLO all 178 students Ans = hello * ALL *??? STUDENTS = hello * ALL *??? STUDENTS 6. Write a program in C to reverse each word in a sentence.6. Write a program in C to reverse each word in a sentence. \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> void main () { char msg [] = \"VCACS PUNE\" ; char str [ 10 ]; int i = 0 , j = 0 ; clrscr (); while ( msg [ i ] != '\\0' ) { if ( msg [ i ] != ' ' ) { str [ j ] = msg [ i ]; j ++ ; } else { str [ j ] = '\\0' ; printf ( \"Reverse string is %s\" , strrev ( str )); printf ( \" \" ); j = 0 ; } i ++ ; } str [ j ] = '\\0' ; printf ( \"Reverse string is %s\" , strrev ( str )); getch (); } output Reverse string is SCACV ENUP 7. Write a function which displays a string in the reverse order.(Use recursion)7. Write a function which displays a string in the reverse order.(Use recursion)###Program \u00b6 #include <stdio.h> int main () { printf ( \"Enter a sentence: \" ); reverseSentence (); return 0 ; } void reverseSentence () { char c ; scanf ( \"%c\" , & c ); if ( c != '\\n' ) { reverseSentence (); printf ( \"reverse string is %c\" , c ); } } output Enter a sentence:vcacs reverse string is scacv 8. Write a program that accepts n words and outputs them in dictionary order.8. Write a program that accepts n words and outputs them in dictionary order.Program \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> void main () { int n , i , j ; char * word [ 10 ], * temp ; printf ( \" \\n Enter how many strings:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) word [ i ] = ( char * ) malloc ( 15 * sizeof ( char )); printf ( \" \\n Enter %d word:\" , n ); for ( i = 0 ; i < n ; i ++ ) scanf ( \"%s\" , word [ i ]); for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( strcmp ( word [ i ], word [ j ]) > 0 ) { temp = word [ i ]; word [ i ] = word [ j ]; word [ j ] = temp ; } } } printf ( \" \\n Words in alphabetical order:\" ); for ( i = 0 ; i < n ; i ++ ) printf ( \" \\n %s\" , word [ i ]); } 9. Write a program that accepts n strings and displays the longest string.strings and displays the longest string. \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> void main () { char s [ 20 ][ 20 ]; int i , n ; int maxlen = 0 ; char longstr [ 80 ]; printf ( \"How many strings you want to enter \\n \" ); scanf ( \"%d\" , & n ); for ( i = 1 ; i <= n ; i ++ ) { printf ( \"Enter %d Strings:\" , i ); scanf ( \"%s\" , & s [ i ]); } for ( i = 1 ; i <= n ; i ++ ) { n = strlen ( s [ i ]); if ( n > maxlen ) { maxlen = n ; strcpy ( longstr , s [ i ]); } } printf ( \" \\n Longest String:= %s\" , longstr ); }","title":"Exercise - 2"},{"location":"Introduction%20to%20C/Exercise-2/#exercise-2","text":"","title":"Exercise - 2"},{"location":"Introduction%20to%20C/Exercise-2/#to-demonstrate-use-of-strings-in-c","text":"","title":"To demonstrate use of strings in C."},{"location":"Introduction%20to%20C/Exercise-2/#1-write-a-menu-driven-program-to-perform-the-following-operations-on-strings-using-standard-library-functions","text":"","title":"1. Write a menu driven program to perform the following operations on strings using standard library functions :"},{"location":"Introduction%20to%20C/Exercise-2/#length","text":"","title":"Length"},{"location":"Introduction%20to%20C/Exercise-2/#copy","text":"","title":"Copy"},{"location":"Introduction%20to%20C/Exercise-2/#concatenation","text":"","title":"Concatenation"},{"location":"Introduction%20to%20C/Exercise-2/#compare","text":"","title":"Compare"},{"location":"Introduction%20to%20C/Exercise-2/#reverse","text":"","title":"Reverse"},{"location":"Introduction%20to%20C/Exercise-2/#uppercase","text":"","title":"Uppercase"},{"location":"Introduction%20to%20C/Exercise-2/#lowercase","text":"","title":"Lowercase"},{"location":"Introduction%20to%20C/Exercise-2/#program","text":"#include <stdio.h> #include <string.h> void main () { char str [ 20 ], str1 [ 20 ]; int ch , l ; char rev , upr , lwr ; printf ( \"Menu \\n 1.Length \\n 2.Copy \\n 3.Concatenation \\n 4.Compare \\n 5. Reverse \\n 6.Uppercase \\n 7. Lowercase \\n \" ); printf ( \"enter option:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); l = strlen ( str ); printf ( \" \\n Length of string=%d\" , l ); break ; case 2 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); strcpy ( str1 , str ); printf ( \" \\n After copy String str1=%s\" , str1 ); break ; case 3 : printf ( \" \\n Enter the First string:\" ); scanf ( \"%s\" , & str ); printf ( \" \\n Enter the Second string:\" ); scanf ( \"%s\" , & str1 ); strcat ( str , str1 ); printf ( \" \\n After Concat String str=%s\" , str ); break ; case 4 : printf ( \" \\n Enter the First string:\" ); scanf ( \"%s\" , & str ); printf ( \" \\n Enter the Second string:\" ); scanf ( \"%s\" , & str1 ); l = strcmp ( str , str1 ); if ( l == 0 ) printf ( \" \\n Both are equal\" ); else printf ( \" \\n Both are Different\" ); break ; case 5 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); rev = strrev ( str ); printf ( \"\\Reverse of the string=%d\" , rev ); break ; case 6 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); upr = strupr ( str ); printf ( \" \\n Uppercase of the string=%d\" , upr ); break ; case 7 : printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , & str ); lwr = strlwr ( str ); printf ( \" \\n Lowercase of the string=%d\" , lwr ); break ; } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#2-write-a-program-that-will-accept-a-string-and-character-to-search-the-program-will-call-a-function-which-will-search-for-the-occurrence-position-of-the-character-in-the-call-a-function-which-will-search-for-the-occurrence-position-of-the-character-in-the-string-and-return-its-position-function-should-return-string-and-return-its-position-function-should-return-1-1-if-the-character-is-not-found-in-if-the-character-is-not-found-in-the-string","text":"","title":"2. Write a program that will accept a string and character to search. The program will call a function, which will search for the occurrence position of the character in the call a function, which will search for the occurrence position of the character in the string and return its position. Function should return string and return its position. Function should return \u2013\u20131 1 if the character is not found in if the character is not found in the string"},{"location":"Introduction%20to%20C/Exercise-2/#program_1","text":"#include <stdio.h> #include <string.h> int search ( char * str , char c ); void main () { char str [ 20 ], ch ; int pos ; printf ( \"Enter the character:\" ); scanf ( \"%c\" , & ch ); printf ( \" \\n Enter the string:\" ); scanf ( \"%s\" , str ); pos = search ( str , ch ); if ( pos == -1 ) printf ( \" \\n Character Not Found\" ); else printf ( \" \\n Character Found at %d position\" , pos + 1 ); } int search ( char * str , char c ) { int i ; for ( i = 0 ; i < strlen ( str ); i ++ ) { if ( c == str [ i ]) return i ; // i++; else { return -1 ; } } } OUTPUT************************* Enter the character:v Enter the string: vcacs Character Found at 1 position","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#3-a-palindrome-is-a-string-that-reads-the-same3a-palindrome-is-a-string-that-reads-the-same-forward-and-reverseforward-and-reverseexampleexample-madam-is-a-palindromewrite-a-function-which-accepts-a-string-and-returns-1-if-the-madam-is-a-palindromewrite-a-function-which-accepts-a-string-and-returns-1-if-the-string-is-a-palindrome-and0-otherwiseuse-thstring-is-a-palindrome-and0-otherwiseuse-this-function-in-main","text":"","title":"3. A palindrome is a string that reads the same3.A palindrome is a string that reads the same-- forward and reverse.forward and reverse.ExampleExample : : \"madam\" is a Palindrome.Write a function which accepts a string and returns 1 if the \"madam\" is a Palindrome.Write a function which accepts a string and returns 1 if the string is a palindrome and0 otherwise.Use thstring is a palindrome and0 otherwise.Use this function in main."},{"location":"Introduction%20to%20C/Exercise-2/#program_2","text":"#include <stdio.h> #include <string.h> int main () { int len = 0 , i = 0 , flag = 1 ; char str [ 10 ]; printf ( \"enter string:\" ); scanf ( \"%s\" , str ); len = strlen ( str ); while ( i < len / 2 ) { if ( str [ i ] != str [ len - i - 1 ]) { flag = 0 ; break ; } i ++ ; } if ( flag == 0 ) { printf ( \"string is not palindrome\" ); } else { printf ( \"string is palindrome\" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#4for-the-following-standard-functions-write-corresponding-user-defined-functions-and-write-a-menu-driven-program-to-use-them-strlen-strrev-strupr-strlwr-strcat-strcmp","text":"","title":"4.For the following standard functions, write corresponding user defined functions and write a menu driven program to use them. Strlen, strrev, strupr, strlwr, strcat, strcmp"},{"location":"Introduction%20to%20C/Exercise-2/#program_3","text":"#include <stdio.h> #include <conio.h> void length ( char * s ) { { int i = 0 ; int i = 0 ; while ( s [ i ] != '\\0' ) { { i ++ ; } } printf ( \" \\n Length of string = %d\" , i ); } } void reverse ( char * s ) { { int i = 0 , j = 0 ; char * str ; while ( s [ i ] != '\\0' ) { { i ++ ; } } i -- ; while ( i >= 0 ) { { str [ j ] = s [ i -- ]; j ++ ; } } str [ j ] = '\\0' ; printf ( \" \\n After reverse string = %s \" , str ); } } void upper ( char * s ) { { int i = 0 ; while ( s [ i ] != '\\0' ) { { if ( s [ i ] >= 97 && s [ i ] <= 122 ) { { s [ i ] = s [ i ] - 32 ; } } i ++ ; } } printf ( \" \\n Upper of string = %s \" , s ); } } void lower ( char * s ) { { int i = 0 ; while ( s [ i ] != '\\0' ) { { if ( s [ i ] >= 65 && s [ i ] <= 90 ) { { s [ i ] = s [ i ] + 32 ; } } i ++ ; } } printf ( \" \\n Lower of string = %s \" , s ); } } void compare ( char * s1 , char * s2 ) { int i = 0 , count = 0 ; while ( s1 [ i ] != '\\0' && s2 [ i ] != '\\0' ) { if ( s1 [ i ] != s2 [ i ]) { count = 0 ; break ; } else count = 1 ; i ++ ; } if ( count == 1 ) printf ( \" \\n Strings are equal\" ); else printf ( \" \\n Strings are different\" ); } void concat ( char * s1 , char * s2 ) { int i = 0 , j = 0 ; while ( s1 [ i ] != '\\0' ) { i ++ ; } i -- ; while ( s2 [ j ] != '\\0' ) { s1 [ i ] = s2 [ j ]; j ++ ; } s1 [ i ] = '\\0' ; //assign last element null^M printf ( \" \\n After concate s1=%s\" , s1 ); } void main () { char * str , * str2 ; int ch ; printf ( \"Enter the String\" ); scanf ( \"%s\" , str ); printf ( \"Enter the String 2\" ); scanf ( \"%s\" , str2 ); do { { printf ( \" \\n MenunMenu \\n 1.Length \\n 2.Reverse \\n 3.Uppercase \\n 4.Lowercase \\n 5.Concat \\n 6.Compare \\n 7.Exit \\n \" ); scanf ( \"%d\" , & ch ); switch ( ch ) { { case 1 : length ( str ); break ; case 2 : reverse ( str ); break ; case 3 : upper ( str ); break ; case 4 : lower ( str ); break ; case 5 : concat ( str , str2 ); break ; case 6 : compare ( str , str2 ); break ; case 7 : printf ( \"\" ); break ; } } } } while ( ch != 6 ); { getch (); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#5-write-a-program-which-accepts-a-sentence-from-the-user-and-alters-it-as-follows-every-space-is-replaced-by-case-of-all-alphabets-is-reversed-digits-are-replaced-by","text":"","title":"5. Write a program which accepts a sentence from the user and alters it as follows : Every space is replaced by *, case of all alphabets is reversed, digits are replaced by ?"},{"location":"Introduction%20to%20C/Exercise-2/#program_4","text":"#include <stdio.h> void main () { char s [ 80 ], * c ; int i = -1 ; clrscr (); printf ( \" \\n Enter the sentencenEnter the sentence \\n \" ); while ( s [ i ] != '\\n' ) { { i ++ ; scanf ( \"%c\" , & s [ i ]); } } i = 0 ; while ( s [ i ] != '\\n' ) { { if ( s [ i ] == ' ' ) { { c [ i ] = '*' ; } } else if ( s [ i ] <= '9' && s [ i ] >= '0' ) { { c [ i ] = '?' ; } } else if ( s [ i ] <= 'z' && s [ i ] >= 'a' ) { { c [ i ] = s [ i ] - 32 ; 32 ; } } else if ( s [ i ] <= 'Z' && s [ i ] >= 'A' ) { { c [ i ] = s [ i ] + 32 ; } } else { { c [ i ] = s [ i ]; } } i ++ ; } c [ i ] = '\\0' ; printf ( \" \\n ans = %s \" , c ); } } ``` ``` output Enter the sentence : HELLO all 178 students : HELLO all 178 students Ans = hello * ALL *??? STUDENTS = hello * ALL *??? STUDENTS","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#6-write-a-program-in-c-to-reverse-each-word-in-a-sentence6-write-a-program-in-c-to-reverse-each-word-in-a-sentence","text":"","title":"6. Write a program in C to reverse each word in a sentence.6. Write a program in C to reverse each word in a sentence."},{"location":"Introduction%20to%20C/Exercise-2/#program_5","text":"#include <stdio.h> #include <string.h> void main () { char msg [] = \"VCACS PUNE\" ; char str [ 10 ]; int i = 0 , j = 0 ; clrscr (); while ( msg [ i ] != '\\0' ) { if ( msg [ i ] != ' ' ) { str [ j ] = msg [ i ]; j ++ ; } else { str [ j ] = '\\0' ; printf ( \"Reverse string is %s\" , strrev ( str )); printf ( \" \" ); j = 0 ; } i ++ ; } str [ j ] = '\\0' ; printf ( \"Reverse string is %s\" , strrev ( str )); getch (); } output Reverse string is SCACV ENUP","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#7-write-a-function-which-displays-a-string-in-the-reverse-orderuse-recursion7-write-a-function-which-displays-a-string-in-the-reverse-orderuse-recursionprogram","text":"#include <stdio.h> int main () { printf ( \"Enter a sentence: \" ); reverseSentence (); return 0 ; } void reverseSentence () { char c ; scanf ( \"%c\" , & c ); if ( c != '\\n' ) { reverseSentence (); printf ( \"reverse string is %c\" , c ); } } output Enter a sentence:vcacs reverse string is scacv","title":"7. Write a function which displays a string in the reverse order.(Use recursion)7. Write a function which displays a string in the reverse order.(Use recursion)###Program"},{"location":"Introduction%20to%20C/Exercise-2/#8-write-a-program-that-accepts-n-words-and-outputs-them-in-dictionary-order8-write-a-program-that-accepts-n-words-and-outputs-them-in-dictionary-orderprogram","text":"","title":"8. Write a program that accepts n words and outputs them in dictionary order.8. Write a program that accepts n words and outputs them in dictionary order.Program"},{"location":"Introduction%20to%20C/Exercise-2/#program_6","text":"#include <stdio.h> #include <string.h> void main () { int n , i , j ; char * word [ 10 ], * temp ; printf ( \" \\n Enter how many strings:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) word [ i ] = ( char * ) malloc ( 15 * sizeof ( char )); printf ( \" \\n Enter %d word:\" , n ); for ( i = 0 ; i < n ; i ++ ) scanf ( \"%s\" , word [ i ]); for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( strcmp ( word [ i ], word [ j ]) > 0 ) { temp = word [ i ]; word [ i ] = word [ j ]; word [ j ] = temp ; } } } printf ( \" \\n Words in alphabetical order:\" ); for ( i = 0 ; i < n ; i ++ ) printf ( \" \\n %s\" , word [ i ]); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-2/#9-write-a-program-that-accepts-n-strings-and-displays-the-longest-stringstrings-and-displays-the-longest-string","text":"","title":"9. Write a program that accepts n strings and displays the longest string.strings and displays the longest string."},{"location":"Introduction%20to%20C/Exercise-2/#program_7","text":"#include <stdio.h> #include <string.h> void main () { char s [ 20 ][ 20 ]; int i , n ; int maxlen = 0 ; char longstr [ 80 ]; printf ( \"How many strings you want to enter \\n \" ); scanf ( \"%d\" , & n ); for ( i = 1 ; i <= n ; i ++ ) { printf ( \"Enter %d Strings:\" , i ); scanf ( \"%s\" , & s [ i ]); } for ( i = 1 ; i <= n ; i ++ ) { n = strlen ( s [ i ]); if ( n > maxlen ) { maxlen = n ; strcpy ( longstr , s [ i ]); } } printf ( \" \\n Longest String:= %s\" , longstr ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-3/","text":"Exercise - 3 \u00b6 To demonstrate use of Structures and Union in C \u00b6 1. Create a structure student (roll number, name, marks of 3 subjects, percentage).Accept details of n students and write a menu driven program to perform the following operations. Write separate functions for the different options. \u00b6 i) Search \u00b6 ii) Modify \u00b6 iii) Display all student details \u00b6 iv) Display all student having percentage > _____ \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> struct student { char name [ 20 ]; int roll , marks [ 3 ]; float percentage ; } stud [ 10 ]; void main () { int ch , n ; int i , j ; float max ; printf ( \"Total number of students:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { int sum = 0 ; printf ( \" \\n Enter the details of Student %d :- \\n \" , i + 1 ); printf ( \" \\n Enter the Name and Roll Number : \" ); scanf ( \"%s %d\" , & stud [ i ]. name , & stud [ i ]. roll ); printf ( \" \\n Enter the Marks of 3 subjects : \" ); for ( j = 0 ; j < 3 ; j ++ ) { scanf ( \"%d\" , & stud [ i ]. marks [ j ]); sum = sum + stud [ i ]. marks [ j ]; } stud [ i ]. percentage = ( float ) sum / 3 ; } do { printf ( \" \\n\\n\\n MENU \\n \" ); printf ( \" \\t 1.Search Student: \\n\\t 2.Display All Students: \\n\\t 3. Display all students having percentage greater than: \\n\\t 4.Display highest percentage among all: \\n\\t 5.Exit \\n \" ); printf ( \" \\n\\t\\t Enter the Choice:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : search ( stud , n ); break ; case 2 : display ( stud , n ); break ; case 3 : greater_percentage ( stud , n ); break ; case 4 : highest_percentage ( stud , n ); break ; case 5 : printf ( \" \" ); break ; } } while ( ch != 5 ); } void display ( struct student stud [ 10 ], int n ) { int i , j ; printf ( \" \\n STUDENTS DETAILS \\n \" ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n ROLL NO.=%d \\t\\t NAME=%s \\t\\t PERCENTAGE=%f\" , stud [ i ]. roll , stud [ i ]. name , stud [ i ]. percentage ); for ( j = 0 ; j < 3 ; j ++ ) { printf ( \" \\t\\t mark %d= %d\" , j + 1 , stud [ i ]. marks [ j ]); } } } void search ( struct student stud [ 10 ], int n ) { int i , j ; char s [ 30 ]; printf ( \" \\n ENTER THE NAME OF THE STUDENT TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( stud [ i ]. name , s )) == 0 ) { printf ( \" \\n ROLL NO.=%d \\t\\t NAME=%s \\t\\t PERCENTAGE=%f\" , stud [ i ]. roll , stud [ i ]. name , stud [ i ]. percentage ); for ( j = 0 ; j < 3 ; j ++ ) { printf ( \" \\t\\t mark %d= %d\" , j + 1 , stud [ i ]. marks [ j ]); } } } } voidgreater_percentage ( struct student stud [ 10 ], int n ) { int i , j ; float perc ; printf ( \"ENTER THE PERCENTAGE WHICH ABOVE STUDENTS YOU WANT TO SEARCH\" ); scanf ( \"%f\" , & perc ); for ( i = 0 ; i < n ; i ++ ) { if ( stud [ i ]. percentage >= perc ) { printf ( \" \\n ROLL NO.=%d \\t\\t NAME=%s PERCENTAGE=%f\" , stud [ i ]. roll , stud [ i ]. name , stud [ i ]. percentage ); for ( j = 0 ; j < 3 ; j ++ ) { printf ( \" \\t\\t marks of subject %d= %d\" , j + 1 , stud [ i ]. marks [ j ]); } } } } voidhighest_percentage ( struct student stud [ 10 ], int n ) { int i , j ; float max = stud [ 0 ]. percentage ; for ( i = 0 ; i < n ; i ++ ) { if ( stud [ i ]. percentage > max ) { max = stud [ i ]. percentage ; } } printf ( \"Highest percentage=%f\" , max ); } 2.Create a structure employee (id, name, salary) salary). Accept details of n employees and write a menu driven program to perform the following operations. Write separate functions for the different options. \u00b6 i) Search by name \u00b6 ii) Search by id \u00b6 iii) Display all \u00b6 iv) Display all employees having salary > _____ \u00b6 v) Display employee having maximum salary \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> struct employee { char name [ 20 ]; int id ; float sal ; } emp [ 10 ]; void main () { int ch , n ; int i ; printf ( \"Total number of Employees:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n Enter the details of Employee %d :- \\n \" , i + 1 ); printf ( \" \\n Enter the Name, Id and Salary : \" ); scanf ( \"%s %d %f\" , & emp [ i ]. name , & emp [ i ]. id , & emp [ i ]. sal ); } do { printf ( \" \\n\\n\\n MENU \\n \" ); printf ( \"1.Display All Employees: \\n 2.Search employee by name: \\n 3.Search employee by id: \\n 4.Display all employees having salary greater than: \\n 5.Display highest salary among all: \\n 6.Exit \\n \" ); printf ( \"Enter the Choice:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : display ( emp , n ); break ; case 2 : search_name ( emp , n ); break ; case 3 : search_id ( emp , n ); break ; case 4 : greater_salary ( emp , n ); break ; case 5 : maximum_salary ( emp , n ); break ; case 6 : printf ( \" \" ); break ; } } while ( ch != 6 ); } void display ( struct employee emp [ 10 ], int n ) { int i ; printf ( \" \\n EMPLOYEES DETAILS \\n \" ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } voidsearch_name ( struct employee emp [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE NAME OF THE EMPLOYEE TO BE SEARCH:\" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( emp [ i ]. name , s )) == 0 ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } } voidsearch_id ( struct employee emp [ 10 ], int n ) { int i , eid ; printf ( \" \\n ENTER THE ID OF THE EMPLOYEE TO BE SEARCH:\" ); scanf ( \"%d\" , & eid ); for ( i = 0 ; i < n ; i ++ ) { if ( emp [ i ]. id == eid ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } } voidgreater_salary ( struct employee emp [ 10 ], int n ) { int i ; float esal ; printf ( \"ENTER THE SALARY WHICH ABOVE EMPLOYEE YOU WANT TO SEARCH:\" ); scanf ( \"%f\" , & esal ); for ( i = 0 ; i < n ; i ++ ) { if ( emp [ i ]. sal >= esal ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } } voidmaximum_salary ( struct employee emp [ 10 ], int n ) { int i ; float max = emp [ 0 ]. sal ; for ( i = 0 ; i < n ; i ++ ) { if ( emp [ i ]. sal > max ) { max = emp [ i ]. sal ; } } printf ( \"Maximum Salary=%f\" , max ); } 3. Create a structure to accept details for n books and write a menu driven program for the following: \u00b6 i) Display all text books \u00b6 ii) Search Text Book according to Title, Author, Publi sher \u00b6 iii) Find the total cost of all books. \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> struct lib { int id , cost ; char title [ 20 ], author [ 20 ], publish [ 20 ]; } s1 [ 10 ]; void main () { int ch , n ; int i ; printf ( \"Enter the no of books in library:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n Enter the details of book %d :- \\n \" , i + 1 ); printf ( \" \\n Enter the Id of book : \" ); scanf ( \"%d\" , & s1 [ i ]. id ); printf ( \" \\n Enter the Title of book : \" ); scanf ( \"%s\" , & s1 [ i ]. title ); printf ( \" \\n Enter the Author of book : \\n \" ); scanf ( \"%s\" , & s1 [ i ]. author ); printf ( \" \\n Enter the Publisher of book : \" ); scanf ( \"%s\" , & s1 [ i ]. publish ); printf ( \" \\n Enter the cost : \" ); scanf ( \"%d\" , & s1 [ i ]. cost ); } do { printf ( \" \\t\\t\\n LIBRARY DETAILS \\n \" ); printf ( \" \\t\\t\\n MENU \\n \" ); printf ( \" \\t 1.Book of specific Author: \\n\\t 2.Book of specific Publisher. \\n\\t 3.Book of specific Title: \\n\\t 4.Find the book cost >=: \\n\\t 5.Display All books: \\n\\t 6.Exit \\n \" ); printf ( \" \\n\\t\\t Enter the Choice:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : search_author ( s1 , n ); break ; case 2 : search_publisher ( s1 , n ); break ; case 3 : search_title ( s1 , n ); break ; case 4 : cost ( s1 , n ); break ; case 5 : display ( s1 , n ); break ; case 6 : total_cost ( s1 , n ); break ; case 7 : printf ( \" \" ); break ; } } while ( ch != 7 ); } void display ( struct lib s1 [ 10 ], int n ) { int i ; printf ( \" \\n\\t COLLEGE LIBRARY \\n \" ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } voidsearch_title ( struct lib s1 [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE BOOK TITLE TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( s1 [ i ]. title , s )) == 0 ) { printf ( \" \\n %s IS found at %d position \\n \" , s , i + 1 ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } } voidsearch_author ( struct lib s1 [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE BOOK AUTHOR TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( s1 [ i ]. author , s )) == 0 ) { printf ( \" \\n %s IS found at %d position \\n \" , s , i + 1 ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } } voidsearch_publisher ( struct lib s1 [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE BOOK PUBLISHER TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( s1 [ i ]. publish , s )) == 0 ) { printf ( \" \\n %s IS found at %d position \\n \" , s , i + 1 ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } } void cost ( struct lib s1 [ 10 ], int n ) { int i , price ; printf ( \"ENTER THE PRICE OF THE BOOK YOU WANT TO SEARCH\" ); scanf ( \"%d\" , & price ); for ( i = 0 ; i < n ; i ++ ) { if ( s1 [ i ]. cost >= price ) { printf ( \"In if\" ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } else { printf ( \"Not found\" ); } } } void cost ( struct lib s1 [ 10 ], int n ) { int i , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = sum + ( s1 [ i ]. cost ); } printf ( \" \\n Total COST Of ALL BOOKS is : %d\" , sum ); }","title":"Exercise - 3"},{"location":"Introduction%20to%20C/Exercise-3/#exercise-3","text":"","title":"Exercise - 3"},{"location":"Introduction%20to%20C/Exercise-3/#to-demonstrate-use-of-structures-and-union-in-c","text":"","title":"To demonstrate use of Structures and Union in C"},{"location":"Introduction%20to%20C/Exercise-3/#1-create-a-structure-student-roll-number-name-marks-of-3-subjects-percentageaccept-details-of-n-students-and-write-a-menu-driven-program-to-perform-the-following-operations-write-separate-functions-for-the-different-options","text":"","title":"1. Create a structure student (roll number, name, marks of 3 subjects, percentage).Accept details of n students and write a menu driven program to perform the following operations. Write separate functions for the different options."},{"location":"Introduction%20to%20C/Exercise-3/#i-search","text":"","title":"i) Search"},{"location":"Introduction%20to%20C/Exercise-3/#ii-modify","text":"","title":"ii) Modify"},{"location":"Introduction%20to%20C/Exercise-3/#iii-display-all-student-details","text":"","title":"iii) Display all student details"},{"location":"Introduction%20to%20C/Exercise-3/#iv-display-all-student-having-percentage-_____","text":"","title":"iv) Display all student having percentage &gt; _____"},{"location":"Introduction%20to%20C/Exercise-3/#program","text":"#include <stdio.h> #include <string.h> struct student { char name [ 20 ]; int roll , marks [ 3 ]; float percentage ; } stud [ 10 ]; void main () { int ch , n ; int i , j ; float max ; printf ( \"Total number of students:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { int sum = 0 ; printf ( \" \\n Enter the details of Student %d :- \\n \" , i + 1 ); printf ( \" \\n Enter the Name and Roll Number : \" ); scanf ( \"%s %d\" , & stud [ i ]. name , & stud [ i ]. roll ); printf ( \" \\n Enter the Marks of 3 subjects : \" ); for ( j = 0 ; j < 3 ; j ++ ) { scanf ( \"%d\" , & stud [ i ]. marks [ j ]); sum = sum + stud [ i ]. marks [ j ]; } stud [ i ]. percentage = ( float ) sum / 3 ; } do { printf ( \" \\n\\n\\n MENU \\n \" ); printf ( \" \\t 1.Search Student: \\n\\t 2.Display All Students: \\n\\t 3. Display all students having percentage greater than: \\n\\t 4.Display highest percentage among all: \\n\\t 5.Exit \\n \" ); printf ( \" \\n\\t\\t Enter the Choice:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : search ( stud , n ); break ; case 2 : display ( stud , n ); break ; case 3 : greater_percentage ( stud , n ); break ; case 4 : highest_percentage ( stud , n ); break ; case 5 : printf ( \" \" ); break ; } } while ( ch != 5 ); } void display ( struct student stud [ 10 ], int n ) { int i , j ; printf ( \" \\n STUDENTS DETAILS \\n \" ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n ROLL NO.=%d \\t\\t NAME=%s \\t\\t PERCENTAGE=%f\" , stud [ i ]. roll , stud [ i ]. name , stud [ i ]. percentage ); for ( j = 0 ; j < 3 ; j ++ ) { printf ( \" \\t\\t mark %d= %d\" , j + 1 , stud [ i ]. marks [ j ]); } } } void search ( struct student stud [ 10 ], int n ) { int i , j ; char s [ 30 ]; printf ( \" \\n ENTER THE NAME OF THE STUDENT TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( stud [ i ]. name , s )) == 0 ) { printf ( \" \\n ROLL NO.=%d \\t\\t NAME=%s \\t\\t PERCENTAGE=%f\" , stud [ i ]. roll , stud [ i ]. name , stud [ i ]. percentage ); for ( j = 0 ; j < 3 ; j ++ ) { printf ( \" \\t\\t mark %d= %d\" , j + 1 , stud [ i ]. marks [ j ]); } } } } voidgreater_percentage ( struct student stud [ 10 ], int n ) { int i , j ; float perc ; printf ( \"ENTER THE PERCENTAGE WHICH ABOVE STUDENTS YOU WANT TO SEARCH\" ); scanf ( \"%f\" , & perc ); for ( i = 0 ; i < n ; i ++ ) { if ( stud [ i ]. percentage >= perc ) { printf ( \" \\n ROLL NO.=%d \\t\\t NAME=%s PERCENTAGE=%f\" , stud [ i ]. roll , stud [ i ]. name , stud [ i ]. percentage ); for ( j = 0 ; j < 3 ; j ++ ) { printf ( \" \\t\\t marks of subject %d= %d\" , j + 1 , stud [ i ]. marks [ j ]); } } } } voidhighest_percentage ( struct student stud [ 10 ], int n ) { int i , j ; float max = stud [ 0 ]. percentage ; for ( i = 0 ; i < n ; i ++ ) { if ( stud [ i ]. percentage > max ) { max = stud [ i ]. percentage ; } } printf ( \"Highest percentage=%f\" , max ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-3/#2create-a-structure-employee-id-name-salary-salary-accept-details-of-n-employees-and-write-a-menu-driven-program-to-perform-the-following-operations-write-separate-functions-for-the-different-options","text":"","title":"2.Create a structure employee (id, name, salary) salary). Accept details of n employees and write a menu driven program to perform the following operations. Write separate functions for the different options."},{"location":"Introduction%20to%20C/Exercise-3/#i-search-by-name","text":"","title":"i) Search by name"},{"location":"Introduction%20to%20C/Exercise-3/#ii-search-by-id","text":"","title":"ii) Search by id"},{"location":"Introduction%20to%20C/Exercise-3/#iii-display-all","text":"","title":"iii) Display all"},{"location":"Introduction%20to%20C/Exercise-3/#iv-display-all-employees-having-salary-_____","text":"","title":"iv) Display all employees having salary &gt; _____"},{"location":"Introduction%20to%20C/Exercise-3/#v-display-employee-having-maximum-salary","text":"","title":"v) Display employee having maximum salary"},{"location":"Introduction%20to%20C/Exercise-3/#program_1","text":"#include <stdio.h> #include <string.h> struct employee { char name [ 20 ]; int id ; float sal ; } emp [ 10 ]; void main () { int ch , n ; int i ; printf ( \"Total number of Employees:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n Enter the details of Employee %d :- \\n \" , i + 1 ); printf ( \" \\n Enter the Name, Id and Salary : \" ); scanf ( \"%s %d %f\" , & emp [ i ]. name , & emp [ i ]. id , & emp [ i ]. sal ); } do { printf ( \" \\n\\n\\n MENU \\n \" ); printf ( \"1.Display All Employees: \\n 2.Search employee by name: \\n 3.Search employee by id: \\n 4.Display all employees having salary greater than: \\n 5.Display highest salary among all: \\n 6.Exit \\n \" ); printf ( \"Enter the Choice:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : display ( emp , n ); break ; case 2 : search_name ( emp , n ); break ; case 3 : search_id ( emp , n ); break ; case 4 : greater_salary ( emp , n ); break ; case 5 : maximum_salary ( emp , n ); break ; case 6 : printf ( \" \" ); break ; } } while ( ch != 6 ); } void display ( struct employee emp [ 10 ], int n ) { int i ; printf ( \" \\n EMPLOYEES DETAILS \\n \" ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } voidsearch_name ( struct employee emp [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE NAME OF THE EMPLOYEE TO BE SEARCH:\" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( emp [ i ]. name , s )) == 0 ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } } voidsearch_id ( struct employee emp [ 10 ], int n ) { int i , eid ; printf ( \" \\n ENTER THE ID OF THE EMPLOYEE TO BE SEARCH:\" ); scanf ( \"%d\" , & eid ); for ( i = 0 ; i < n ; i ++ ) { if ( emp [ i ]. id == eid ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } } voidgreater_salary ( struct employee emp [ 10 ], int n ) { int i ; float esal ; printf ( \"ENTER THE SALARY WHICH ABOVE EMPLOYEE YOU WANT TO SEARCH:\" ); scanf ( \"%f\" , & esal ); for ( i = 0 ; i < n ; i ++ ) { if ( emp [ i ]. sal >= esal ) { printf ( \" \\n ID=%d \\t NAME=%s \\t SALARY=%f\" , emp [ i ]. id , emp [ i ]. name , emp [ i ]. sal ); } } } voidmaximum_salary ( struct employee emp [ 10 ], int n ) { int i ; float max = emp [ 0 ]. sal ; for ( i = 0 ; i < n ; i ++ ) { if ( emp [ i ]. sal > max ) { max = emp [ i ]. sal ; } } printf ( \"Maximum Salary=%f\" , max ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-3/#3-create-a-structure-to-accept-details-for-n-books-and-write-a-menu-driven-program-for-the-following","text":"","title":"3. Create a structure to accept details for n books and write a menu driven program for the following:"},{"location":"Introduction%20to%20C/Exercise-3/#i-display-all-text-books","text":"","title":"i) Display all text books"},{"location":"Introduction%20to%20C/Exercise-3/#ii-search-text-book-according-to-title-author-publi-sher","text":"","title":"ii) Search Text Book according to Title, Author, Publi sher"},{"location":"Introduction%20to%20C/Exercise-3/#iii-find-the-total-cost-of-all-books","text":"","title":"iii) Find the total cost of all books."},{"location":"Introduction%20to%20C/Exercise-3/#program_2","text":"#include <stdio.h> #include <string.h> struct lib { int id , cost ; char title [ 20 ], author [ 20 ], publish [ 20 ]; } s1 [ 10 ]; void main () { int ch , n ; int i ; printf ( \"Enter the no of books in library:\" ); scanf ( \"%d\" , & n ); for ( i = 0 ; i < n ; i ++ ) { printf ( \" \\n Enter the details of book %d :- \\n \" , i + 1 ); printf ( \" \\n Enter the Id of book : \" ); scanf ( \"%d\" , & s1 [ i ]. id ); printf ( \" \\n Enter the Title of book : \" ); scanf ( \"%s\" , & s1 [ i ]. title ); printf ( \" \\n Enter the Author of book : \\n \" ); scanf ( \"%s\" , & s1 [ i ]. author ); printf ( \" \\n Enter the Publisher of book : \" ); scanf ( \"%s\" , & s1 [ i ]. publish ); printf ( \" \\n Enter the cost : \" ); scanf ( \"%d\" , & s1 [ i ]. cost ); } do { printf ( \" \\t\\t\\n LIBRARY DETAILS \\n \" ); printf ( \" \\t\\t\\n MENU \\n \" ); printf ( \" \\t 1.Book of specific Author: \\n\\t 2.Book of specific Publisher. \\n\\t 3.Book of specific Title: \\n\\t 4.Find the book cost >=: \\n\\t 5.Display All books: \\n\\t 6.Exit \\n \" ); printf ( \" \\n\\t\\t Enter the Choice:\" ); scanf ( \"%d\" , & ch ); switch ( ch ) { case 1 : search_author ( s1 , n ); break ; case 2 : search_publisher ( s1 , n ); break ; case 3 : search_title ( s1 , n ); break ; case 4 : cost ( s1 , n ); break ; case 5 : display ( s1 , n ); break ; case 6 : total_cost ( s1 , n ); break ; case 7 : printf ( \" \" ); break ; } } while ( ch != 7 ); } void display ( struct lib s1 [ 10 ], int n ) { int i ; printf ( \" \\n\\t COLLEGE LIBRARY \\n \" ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } voidsearch_title ( struct lib s1 [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE BOOK TITLE TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( s1 [ i ]. title , s )) == 0 ) { printf ( \" \\n %s IS found at %d position \\n \" , s , i + 1 ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } } voidsearch_author ( struct lib s1 [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE BOOK AUTHOR TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( s1 [ i ]. author , s )) == 0 ) { printf ( \" \\n %s IS found at %d position \\n \" , s , i + 1 ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } } voidsearch_publisher ( struct lib s1 [ 10 ], int n ) { int i ; char s [ 30 ]; printf ( \" \\n ENTER THE BOOK PUBLISHER TO BE SEARCH : \" ); scanf ( \"%s\" , & s ); for ( i = 0 ; i < n ; i ++ ) { if (( strcmp ( s1 [ i ]. publish , s )) == 0 ) { printf ( \" \\n %s IS found at %d position \\n \" , s , i + 1 ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } } } void cost ( struct lib s1 [ 10 ], int n ) { int i , price ; printf ( \"ENTER THE PRICE OF THE BOOK YOU WANT TO SEARCH\" ); scanf ( \"%d\" , & price ); for ( i = 0 ; i < n ; i ++ ) { if ( s1 [ i ]. cost >= price ) { printf ( \"In if\" ); printf ( \" \\n BOOK ID \\t\\t TITLE \\t\\t AUTHOR \\t\\t PUBLISHER \\t\\t BOOK COST \\n \" ); printf ( \"%d \\t\\t %s \\t\\t %s \\t\\t %s \\t\\t %d \\n \" , s1 [ i ]. id , s1 [ i ]. title , s1 [ i ]. author , s1 [ i ]. publish , s1 [ i ]. cost ); } else { printf ( \"Not found\" ); } } } void cost ( struct lib s1 [ 10 ], int n ) { int i , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = sum + ( s1 [ i ]. cost ); } printf ( \" \\n Total COST Of ALL BOOKS is : %d\" , sum ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-4/","text":"Exercise - 4 \u00b6 To demonstrate use of Dynamic Memory Allocation in C. \u00b6 1) Program to calculate the sum of 10 numbers. Declare a pointer to integer. Allocate the memory using malloc() to it for n integers. Accept the integers, Calculate and print the sum. Lastly release the allocated memory. \u00b6 Program \u00b6 #include <stdio.h> #include <stdlib.h> void main () { int * ptr , n = 10 , i , sum = 0 ; //allocate memory ptr = ( int * ) malloc ( n * sizeof ( int )); if ( ptr == NULL ) { printf ( \"memory was not allocated\" ); printf ( \"Enter the numbers:\" ); for ( i = 0 ; i < 10 ; i ++ ) scanf ( \"%d\" , ptr + i ); sum = sum + * ptr + i ; //or *(ptr+ printf ( \"The sum=%d\" , sum ); free ( ptr ); } } Output Enter the numbers: 3 5 6 1 5 6 7 8 9 1 The sum=51 2) Declare a pointer to character. Allocate them memory for n characters (string) using calloc(). Accept the string and count the number of vowels and consonants in it. Lastly free the pointer. \u00b6 Program \u00b6 #include <stdio.h> int main () { char * ptr ; int cntV = 0 , cntC = 0 ; //assign memory ptr = ( char * ) calloc ( 80 , sizeof ( char )); printf ( \"Enter a string: \" ); scanf ( \"%s\" , ptr ); while ( * ptr != '\\0' ) { if ( * ptr == 'A' || * ptr == 'E' || * ptr == 'I' || * ptr == 'O' || * ptr == 'U' || * ptr == 'a' || * ptr == 'e' || * ptr == 'i' || * ptr == 'o' || * ptr == 'u' ) { cntV ++ ; } else { cntC ++ ; } //increase the pointer, to point next character ptr ++ ; } printf ( \"Total number of VOWELS= %d, CONSONANT= %d \\n \" , cntV , cntC ); return 0 ; free ( ptr ); } Enter a string: hello Total number of VOWELS= 2, CONSONANT=3 3) Declare a pointer to float. Allocate the memory for five float numbers. Accept these five numbers and print them. Expand the same memory for three more float numbers.Also accept the three numbers and calculate the sum and average of all numbers. Lastly remove the expanded block from memory. \u00b6 Program \u00b6 #include <stdio.h> void main () { float * ptr , sum , avg ; int i , n = 5 , n1 = 3 ; //memory allocation ptr = ( float * ) malloc ( n * sizeof ( float )); printf ( \" E nter the numbers:\" ); for ( i = 0 ; i < 5 ; i ++ ) scanf ( \"%f\" , ptr + i ); printf ( \"You want to add three numbers more\u2026\" ); //memory reallocation ptr = ( float * ) realloc ( ptr ,( n + n1 ) * sizeof ( float )); printf ( \"Enter the remaining numbers\" ); for ( i = n ; i < ( n + n1 ); i ++ ) { scanf ( \"% f\" , ptr + i ); } printf ( \"The new list isn\" ); for ( i = n ; i < ( n + n1 ); i ++ ) { printf ( \"% f t\" , * ( ptr + i )); sum = sum + * ptr + i ; } printf ( \"The sum of new list is=%f\" , sum ); avg = sum / ( n + n1 ); printf ( \"The Average of new list is=%f\" , avg ); } output Enter the numbers:1 2 3 4 5 You want to add three numbers more\u2026 Enter the remaining numbers: 6 7 8 The new list is 1 2 3 4 5 6 7 8 The sum of new list is=36 The Average of new list is=4.5","title":"Exercise - 4"},{"location":"Introduction%20to%20C/Exercise-4/#exercise-4","text":"","title":"Exercise - 4"},{"location":"Introduction%20to%20C/Exercise-4/#to-demonstrate-use-of-dynamic-memory-allocation-in-c","text":"","title":"To demonstrate use of Dynamic Memory Allocation in C."},{"location":"Introduction%20to%20C/Exercise-4/#1-program-to-calculate-the-sum-of-10-numbers-declare-a-pointer-to-integer-allocate-the-memory-using-malloc-to-it-for-n-integers-accept-the-integers-calculate-and-print-the-sum-lastly-release-the-allocated-memory","text":"","title":"1) Program to calculate the sum of 10 numbers. Declare a pointer to integer. Allocate the memory using malloc() to it for n integers. Accept the integers, Calculate and print the sum. Lastly release the allocated memory."},{"location":"Introduction%20to%20C/Exercise-4/#program","text":"#include <stdio.h> #include <stdlib.h> void main () { int * ptr , n = 10 , i , sum = 0 ; //allocate memory ptr = ( int * ) malloc ( n * sizeof ( int )); if ( ptr == NULL ) { printf ( \"memory was not allocated\" ); printf ( \"Enter the numbers:\" ); for ( i = 0 ; i < 10 ; i ++ ) scanf ( \"%d\" , ptr + i ); sum = sum + * ptr + i ; //or *(ptr+ printf ( \"The sum=%d\" , sum ); free ( ptr ); } } Output Enter the numbers: 3 5 6 1 5 6 7 8 9 1 The sum=51","title":"Program"},{"location":"Introduction%20to%20C/Exercise-4/#2-declare-a-pointer-to-character-allocate-them-memory-for-n-characters-string-using-calloc-accept-the-string-and-count-the-number-of-vowels-and-consonants-in-it-lastly-free-the-pointer","text":"","title":"2) Declare a pointer to character. Allocate them memory for n characters (string) using calloc(). Accept the string and count the number of vowels and consonants in it. Lastly free the pointer."},{"location":"Introduction%20to%20C/Exercise-4/#program_1","text":"#include <stdio.h> int main () { char * ptr ; int cntV = 0 , cntC = 0 ; //assign memory ptr = ( char * ) calloc ( 80 , sizeof ( char )); printf ( \"Enter a string: \" ); scanf ( \"%s\" , ptr ); while ( * ptr != '\\0' ) { if ( * ptr == 'A' || * ptr == 'E' || * ptr == 'I' || * ptr == 'O' || * ptr == 'U' || * ptr == 'a' || * ptr == 'e' || * ptr == 'i' || * ptr == 'o' || * ptr == 'u' ) { cntV ++ ; } else { cntC ++ ; } //increase the pointer, to point next character ptr ++ ; } printf ( \"Total number of VOWELS= %d, CONSONANT= %d \\n \" , cntV , cntC ); return 0 ; free ( ptr ); } Enter a string: hello Total number of VOWELS= 2, CONSONANT=3","title":"Program"},{"location":"Introduction%20to%20C/Exercise-4/#3-declare-a-pointer-to-float-allocate-the-memory-for-five-float-numbers-accept-these-five-numbers-and-print-them-expand-the-same-memory-for-three-more-float-numbersalso-accept-the-three-numbers-and-calculate-the-sum-and-average-of-all-numbers-lastly-remove-the-expanded-block-from-memory","text":"","title":"3) Declare a pointer to float. Allocate the memory for five float numbers. Accept these five numbers and print them. Expand the same memory for three more float numbers.Also accept the three numbers and calculate the sum and average of all numbers. Lastly remove the expanded block from memory."},{"location":"Introduction%20to%20C/Exercise-4/#program_2","text":"#include <stdio.h> void main () { float * ptr , sum , avg ; int i , n = 5 , n1 = 3 ; //memory allocation ptr = ( float * ) malloc ( n * sizeof ( float )); printf ( \" E nter the numbers:\" ); for ( i = 0 ; i < 5 ; i ++ ) scanf ( \"%f\" , ptr + i ); printf ( \"You want to add three numbers more\u2026\" ); //memory reallocation ptr = ( float * ) realloc ( ptr ,( n + n1 ) * sizeof ( float )); printf ( \"Enter the remaining numbers\" ); for ( i = n ; i < ( n + n1 ); i ++ ) { scanf ( \"% f\" , ptr + i ); } printf ( \"The new list isn\" ); for ( i = n ; i < ( n + n1 ); i ++ ) { printf ( \"% f t\" , * ( ptr + i )); sum = sum + * ptr + i ; } printf ( \"The sum of new list is=%f\" , sum ); avg = sum / ( n + n1 ); printf ( \"The Average of new list is=%f\" , avg ); } output Enter the numbers:1 2 3 4 5 You want to add three numbers more\u2026 Enter the remaining numbers: 6 7 8 The new list is 1 2 3 4 5 6 7 8 The sum of new list is=36 The Average of new list is=4.5","title":"Program"},{"location":"Introduction%20to%20C/Exercise-5/","text":"Exercise - 5 \u00b6 To demonstrate text files using C \u00b6 1. Write a program to accept two filenames as command line arguments. Copy the contents of the first file to the second such that the case of all alphabets is reversed. \u00b6 Program \u00b6 Create first.txt file externally and write any message in that. After that create file_copy.c file by using vi editor #include <stdio.h> int main () { FILE * fp1 , * fp2 ; char ch ; fp1 = fopen ( \"first.txt\" , \"r\" ); fp2 = fopen ( \"second.txt\" , \"w\" ); ch = fgetc ( fp1 ); while ( ch != EOF ) if ( ch >= 65 && ch <= 90 ) fputc ( ch + 32 , fp2 ); else if ( ch >= 97 && ch <= 122 ) fputc ( ch - 32 , fp2 ); else fputc ( ch , fp2 ); ch = fgetc ( fp1 ); fclose ( fp1 ); fclose ( fp2 ); //fcloseall(); } Now compile file by using gccfile_copy.c and take the output using ./a.out command. Nothing will be display on the terminal but second.txt file will be created in that folder and all the contents of first file will be in reversed case. Output: first.txt HELLO ALL FRIENDS second.txt hello all friends 2. Write a program to accept a filename as command line argument and count the number of words, lines and characters in the file. \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> void main ( int argc , char * argv []) { int noc = 0 , now = 0 , nol = 0 ; FILE * fr ; char fname [ 20 ], ch ; strcpy ( fname , argv [ 1 ]); fr = fopen ( fname , \"r\" ); if ( fr == NULL ) { printf ( \" \\n error \\n \" ); } ch = fgetc ( fr ); while ( ch != EOF ) { noc ++ ; if ( ch == ' ' ) now ++ ; if ( ch == '\\n' ) { nol ++ ; now ++ ; } ch = fgetc ( fr ); } fclose ( fr ); printf ( \" \\\\ n total no of characters=%d\" , noc ); printf ( \" \\\\ n total no of line=%d\" , nol ); printf ( \" \\\\ n total no of words=%d\" , now ); } 3. Write a program to accept details of n students (roll number, name, and percentage) and write it to a file named \u201cstudent.txt\u201d. Ac cept roll number from the user and search the student in the file. Also display the student details having the highest percentage \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> int main () { int roll , r , no ; char name [ 30 ], n [ 30 ]; float per , p ; FILE * fm ; fm = fopen ( \"student.txt\" , \"r\" ); printf ( \" \\n Enter roll number:\" ); scanf ( \"%d\" , & no ); p = 0 ; while ( ! feof ( fm )) { fscanf ( fm , \"%d %s %f \\\\ n\" , & roll , & name , & per ); if ( no == roll ) { printf ( \" \\\\ nROLLNO NAME PERCENTAGEnROLLNO NAME PERCENTAGE \\\\ n\" ); } if ( p < per ) { p = per ; p = per ; strcpy ( n , name ); strcpy ( n , name ); r = roll ; r = roll ; } printf ( \"Higest percentage is \\\\ n\" ); printf ( \"Roll No: %d \\\\ tName: %stName: %s \\\\ tPercentage: %ftPercentage: %f \\\\ n\" , r , n , p ); fclose ( fm ); } } ============================================================= Output student@localhost file]$ vifile_student.c [student@localhost file]$ gccfile_student.c [student@localhost file]$ ./a.out Enter roll number:2 ROLLNO NAME PERCENTAGE 2 Shadab 75.500000 Higest percentage is Roll No: 3","title":"Exercise - 5"},{"location":"Introduction%20to%20C/Exercise-5/#exercise-5","text":"","title":"Exercise - 5"},{"location":"Introduction%20to%20C/Exercise-5/#to-demonstrate-text-files-using-c","text":"","title":"To demonstrate text files using C"},{"location":"Introduction%20to%20C/Exercise-5/#1-write-a-program-to-accept-two-filenames-as-command-line-arguments-copy-the-contents-of-the-first-file-to-the-second-such-that-the-case-of-all-alphabets-is-reversed","text":"","title":"1. Write a program to accept two filenames as command line arguments. Copy the contents of the first file to the second such that the case of all alphabets is reversed."},{"location":"Introduction%20to%20C/Exercise-5/#program","text":"Create first.txt file externally and write any message in that. After that create file_copy.c file by using vi editor #include <stdio.h> int main () { FILE * fp1 , * fp2 ; char ch ; fp1 = fopen ( \"first.txt\" , \"r\" ); fp2 = fopen ( \"second.txt\" , \"w\" ); ch = fgetc ( fp1 ); while ( ch != EOF ) if ( ch >= 65 && ch <= 90 ) fputc ( ch + 32 , fp2 ); else if ( ch >= 97 && ch <= 122 ) fputc ( ch - 32 , fp2 ); else fputc ( ch , fp2 ); ch = fgetc ( fp1 ); fclose ( fp1 ); fclose ( fp2 ); //fcloseall(); } Now compile file by using gccfile_copy.c and take the output using ./a.out command. Nothing will be display on the terminal but second.txt file will be created in that folder and all the contents of first file will be in reversed case. Output: first.txt HELLO ALL FRIENDS second.txt hello all friends","title":"Program"},{"location":"Introduction%20to%20C/Exercise-5/#2-write-a-program-to-accept-a-filename-as-command-line-argument-and-count-the-number-of-words-lines-and-characters-in-the-file","text":"","title":"2. Write a program to accept a filename as command line argument and count the number of words, lines and characters in the file."},{"location":"Introduction%20to%20C/Exercise-5/#program_1","text":"#include <stdio.h> #include <string.h> void main ( int argc , char * argv []) { int noc = 0 , now = 0 , nol = 0 ; FILE * fr ; char fname [ 20 ], ch ; strcpy ( fname , argv [ 1 ]); fr = fopen ( fname , \"r\" ); if ( fr == NULL ) { printf ( \" \\n error \\n \" ); } ch = fgetc ( fr ); while ( ch != EOF ) { noc ++ ; if ( ch == ' ' ) now ++ ; if ( ch == '\\n' ) { nol ++ ; now ++ ; } ch = fgetc ( fr ); } fclose ( fr ); printf ( \" \\\\ n total no of characters=%d\" , noc ); printf ( \" \\\\ n total no of line=%d\" , nol ); printf ( \" \\\\ n total no of words=%d\" , now ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-5/#3-write-a-program-to-accept-details-of-n-students-roll-number-name-and-percentage-and-write-it-to-a-file-named-studenttxt-ac-cept-roll-number-from-the-user-and-search-the-student-in-the-file-also-display-the-student-details-having-the-highest-percentage","text":"","title":"3. Write a program to accept details of n students (roll number, name, and percentage) and write it to a file named \u201cstudent.txt\u201d. Ac cept roll number from the user and search the student in the file. Also display the student details having the highest percentage"},{"location":"Introduction%20to%20C/Exercise-5/#program_2","text":"#include <stdio.h> #include <string.h> int main () { int roll , r , no ; char name [ 30 ], n [ 30 ]; float per , p ; FILE * fm ; fm = fopen ( \"student.txt\" , \"r\" ); printf ( \" \\n Enter roll number:\" ); scanf ( \"%d\" , & no ); p = 0 ; while ( ! feof ( fm )) { fscanf ( fm , \"%d %s %f \\\\ n\" , & roll , & name , & per ); if ( no == roll ) { printf ( \" \\\\ nROLLNO NAME PERCENTAGEnROLLNO NAME PERCENTAGE \\\\ n\" ); } if ( p < per ) { p = per ; p = per ; strcpy ( n , name ); strcpy ( n , name ); r = roll ; r = roll ; } printf ( \"Higest percentage is \\\\ n\" ); printf ( \"Roll No: %d \\\\ tName: %stName: %s \\\\ tPercentage: %ftPercentage: %f \\\\ n\" , r , n , p ); fclose ( fm ); } } ============================================================= Output student@localhost file]$ vifile_student.c [student@localhost file]$ gccfile_student.c [student@localhost file]$ ./a.out Enter roll number:2 ROLLNO NAME PERCENTAGE 2 Shadab 75.500000 Higest percentage is Roll No: 3","title":"Program"},{"location":"Introduction%20to%20C/Exercise-6/","text":"Exercise - 6 \u00b6 To Demonstrate preprocessor directives. \u00b6 1.Define a macro EQUALSTR which compares two strings x and y and gives 1 if equal and 0 otherwise. Use this macro to accept two strings from the user and check if they are equal. \u00b6 Program \u00b6 #include <stdio.h> #include <string.h> #define EQUALSTR(a, b) ((strcmp(a, b) == 0) ? 1 : 0) int main () { int r ; char s1 [ 20 ], s2 [ 20 ]; printf ( \" \\n Enter two strings : \" ); scanf ( \"%s %s\" , & s1 , & s2 ); r = EQUALSTR ( s1 , s2 ); if ( r == 1 ) { } else { } printf ( \" \\n Both Strings Are Equal \\n\\n \" ); printf ( \" \\n Both Strings are Not Equal \\n\\n \" ); } 2.Write a program in C that uses a macro SWAP to interchange the values of two variables. Use the same macro to sort an array of ten integers using bubble sort. \u00b6 Program \u00b6 #include <stdio.h> #define SWAP(a, b, Type) void main () { int x = 14 , y = 15 ; printf ( \"Before Swapping \\n x=%d \\t y=%d \\n \" , x , y ); SWAP ( x , y , int ); printf ( \"After Swapping \\n x=%d \\t y=%d \\n \" , x , y ); } output Before Swapping x=14 y=15 After Swapping x=15 y=14 3.Define two macros UPPERCASE and LOWERCASE to check whether the character is upper case or lower case. Also accept a string and reverse the case of each character in it. \u00b6 Program \u00b6 #include <stdio.h> // Macro definitions #define UPPERCASE(x) (x >= 'A' && x <= 'Z') LOWERCASE(x)(x >= 'a' && x <= 'z') int main () { char ch , convUpper , convLower ; // Input a character from user printf(\"Enter any character: \"); ch = getchar(); if ( UPPERCASE ( ch )) { printf ( \"'%c' is in uppercase, \\n \" , ch ); convLower = ch + 32 ; printf ( \u201c After conversion , the lowercase is = % c \u201d , convLower ); } else if ( LOWERCASE ( ch )) { printf ( \"'%c' is in lowercase \\n \" , ch ); convLower = ch - 32 ; printf ( \u201c After conversion , the Uppercase is = % c \u201d , convUpper ); } else { printf ( \"Entered character is not alphabet\" ); } return 0 ; } output Enter any character: A A is in uppercase After conversion, the lowercase is=a Enter any character: q q is in lowercase After conversion, the Uppercase is=Q 4.Define a macro EQUALINT which compares two parameters x and y and gives 1 if equal and 0 otherwise. Use this macro to accept pairs of integers from the user. Calculate the sum of digits of both and continue till the user enters a pair whose sum of digits is not equal. \u00b6 Program \u00b6 #include <stdio.h> #include<string.h> #define EQUALINT (a, b)((a == b) ? 1 : 0) main() { int a , b , ans ; printf ( \" \\n Enter two numbers : \" ); scanf ( \"%d %d\" , & a , & b ); ans = EQUALINT ( a , b ); if ( ans == 1 ) { } else { } printf ( \" \\n Both numbers Are Equal \\n\\n \" ); printf ( \" \\n Both numbers are Not Equal \\n\\n \" ); } Output Enter two numbers : 3 4 Both numbers are Not Equal 5.Create a program to find maximum number using macro MAX \u00b6 Program \u00b6 #include <stdio.h> #define MAX(x, y) ((x > y) ? x : y) int main () { int a , b , max ; printf ( \"Enter first number: \" ); scanf ( \"%d\" , & a ); printf ( \"Enter second number: \" ); scanf ( \"%d\" , & b ); max = MAX ( a , b ); printf ( \"Maximum number is: %d \\n \" , max ); return 0 ; } Output Enter first number: 100 Enter second number: 200 Maximum number is: 200","title":"Exercise - 6"},{"location":"Introduction%20to%20C/Exercise-6/#exercise-6","text":"","title":"Exercise - 6"},{"location":"Introduction%20to%20C/Exercise-6/#to-demonstrate-preprocessor-directives","text":"","title":"To Demonstrate preprocessor directives."},{"location":"Introduction%20to%20C/Exercise-6/#1define-a-macro-equalstr-which-compares-two-strings-x-and-y-and-gives-1-if-equal-and-0-otherwise-use-this-macro-to-accept-two-strings-from-the-user-and-check-if-they-are-equal","text":"","title":"1.Define a macro EQUALSTR which compares two strings x and y and gives 1 if equal and 0 otherwise. Use this macro to accept two strings from the user and check if they are equal."},{"location":"Introduction%20to%20C/Exercise-6/#program","text":"#include <stdio.h> #include <string.h> #define EQUALSTR(a, b) ((strcmp(a, b) == 0) ? 1 : 0) int main () { int r ; char s1 [ 20 ], s2 [ 20 ]; printf ( \" \\n Enter two strings : \" ); scanf ( \"%s %s\" , & s1 , & s2 ); r = EQUALSTR ( s1 , s2 ); if ( r == 1 ) { } else { } printf ( \" \\n Both Strings Are Equal \\n\\n \" ); printf ( \" \\n Both Strings are Not Equal \\n\\n \" ); }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-6/#2write-a-program-in-c-that-uses-a-macro-swap-to-interchange-the-values-of-two-variables-use-the-same-macro-to-sort-an-array-of-ten-integers-using-bubble-sort","text":"","title":"2.Write a program in C that uses a macro SWAP to interchange the values of two variables. Use the same macro to sort an array of ten integers using bubble sort."},{"location":"Introduction%20to%20C/Exercise-6/#program_1","text":"#include <stdio.h> #define SWAP(a, b, Type) void main () { int x = 14 , y = 15 ; printf ( \"Before Swapping \\n x=%d \\t y=%d \\n \" , x , y ); SWAP ( x , y , int ); printf ( \"After Swapping \\n x=%d \\t y=%d \\n \" , x , y ); } output Before Swapping x=14 y=15 After Swapping x=15 y=14","title":"Program"},{"location":"Introduction%20to%20C/Exercise-6/#3define-two-macros-uppercase-and-lowercase-to-check-whether-the-character-is-upper-case-or-lower-case-also-accept-a-string-and-reverse-the-case-of-each-character-in-it","text":"","title":"3.Define two macros UPPERCASE and LOWERCASE to check whether the character is upper case or lower case. Also accept a string and reverse the case of each character in it."},{"location":"Introduction%20to%20C/Exercise-6/#program_2","text":"#include <stdio.h> // Macro definitions #define UPPERCASE(x) (x >= 'A' && x <= 'Z') LOWERCASE(x)(x >= 'a' && x <= 'z') int main () { char ch , convUpper , convLower ; // Input a character from user printf(\"Enter any character: \"); ch = getchar(); if ( UPPERCASE ( ch )) { printf ( \"'%c' is in uppercase, \\n \" , ch ); convLower = ch + 32 ; printf ( \u201c After conversion , the lowercase is = % c \u201d , convLower ); } else if ( LOWERCASE ( ch )) { printf ( \"'%c' is in lowercase \\n \" , ch ); convLower = ch - 32 ; printf ( \u201c After conversion , the Uppercase is = % c \u201d , convUpper ); } else { printf ( \"Entered character is not alphabet\" ); } return 0 ; } output Enter any character: A A is in uppercase After conversion, the lowercase is=a Enter any character: q q is in lowercase After conversion, the Uppercase is=Q","title":"Program"},{"location":"Introduction%20to%20C/Exercise-6/#4define-a-macro-equalint-which-compares-two-parameters-x-and-y-and-gives-1-if-equal-and-0-otherwise-use-this-macro-to-accept-pairs-of-integers-from-the-user-calculate-the-sum-of-digits-of-both-and-continue-till-the-user-enters-a-pair-whose-sum-of-digits-is-not-equal","text":"","title":"4.Define a macro EQUALINT which compares two parameters x and y and gives 1 if equal and 0 otherwise. Use this macro to accept pairs of integers from the user. Calculate the sum of digits of both and continue till the user enters a pair whose sum of digits is not equal."},{"location":"Introduction%20to%20C/Exercise-6/#program_3","text":"#include <stdio.h> #include<string.h> #define EQUALINT (a, b)((a == b) ? 1 : 0) main() { int a , b , ans ; printf ( \" \\n Enter two numbers : \" ); scanf ( \"%d %d\" , & a , & b ); ans = EQUALINT ( a , b ); if ( ans == 1 ) { } else { } printf ( \" \\n Both numbers Are Equal \\n\\n \" ); printf ( \" \\n Both numbers are Not Equal \\n\\n \" ); } Output Enter two numbers : 3 4 Both numbers are Not Equal","title":"Program"},{"location":"Introduction%20to%20C/Exercise-6/#5create-a-program-to-find-maximum-number-using-macro-max","text":"","title":"5.Create a program to find maximum number using macro MAX"},{"location":"Introduction%20to%20C/Exercise-6/#program_4","text":"#include <stdio.h> #define MAX(x, y) ((x > y) ? x : y) int main () { int a , b , max ; printf ( \"Enter first number: \" ); scanf ( \"%d\" , & a ); printf ( \"Enter second number: \" ); scanf ( \"%d\" , & b ); max = MAX ( a , b ); printf ( \"Maximum number is: %d \\n \" , max ); return 0 ; } Output Enter first number: 100 Enter second number: 200 Maximum number is: 200","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/","text":"Exercise - 7 \u00b6 Print Patterns using *, numbers and characters \u00b6 Program to print half pyramid using * \u00b6 * * * * * * * * * * * * * * * Program \u00b6 #include <stdio.h> int main () { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"* \" ); } printf ( \" \\n \" ); } } Program to print half pyramid a using numbers \u00b6 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 Program \u00b6 #include <stdio.h> int main (); { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%d \" , j ); } printf ( \" \\n \" ); } } Program to print half pyramid using alphabets A \u00b6 A B B C C C D D D D E E E E E Program \u00b6 #include <stdio.h> int main (); { int i , j ; char input , alphabet = 'A' ; printf ( \"Enter the uppercase character you want to print in last row: \" ); scanf ( \"%c\" , & input ); for ( i = 1 ; i <= ( input - 'A' + 1 ); ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%c\" , alphabet ); } ++ alphabet ; printf ( \" \\n \" ); } } Programs to print inverted half pyramid using * and numbers \u00b6 * * * * * * * * * * * * * * * Program \u00b6 #include <stdio.h> int main (); { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = rows ; i >= 1 ; -- i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"* \" ); } printf ( \" \\n \" ); } } Program to Inverted half pyramid using numbers \u00b6 1 2 3 4 5 1 2 3 4 1 2 3 1 2 1 Program \u00b6 #include <stdio.h> int main (); { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = rows ; i >= 1 ; -- i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%d \" , j ); } printf ( \" \\n \" ); } } Programs to display pyramid and inverted pyramid using * and digits \u00b6 Program to print full pyramid using * \u00b6 * * * * * * * * * Program \u00b6 #include <stdio.h> int main (); { int i , space , rows , k = 0 ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i , k = 0 ) { for ( space = 1 ; space <= rows - i ; ++ space ) { printf ( \" \" ); } while ( k != 2 * i - 1 ) { printf ( \"* \" ); ++ k ; } printf ( \" \\n \" ); } } Program to print pyramid using numbers \u00b6 1 2 3 2 3 4 5 4 3 4 5 6 7 6 5 4 5 6 7 8 9 8 7 6 5 Program \u00b6 #include <stdio.h> int main (); { int i , space , rows , k = 0 , count = 0 , count1 = 0 ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i ) { for ( space = 1 ; space <= rows - i ; ++ space ) { printf ( \" \" ); ++ count ; } while ( k != 2 * i - 1 ) { if ( count <= rows - 1 ) { printf ( \"%d \" , i + k ); ++ count ; } else { ++ count1 ; printf ( \"%d \" , ( i + k - 2 * count1 )); } ++ k ; } count1 = count = k = 0 ; printf ( \" \\n \" ); } } Program to Inverted full pyramid using * \u00b6 * * * * * * * * * * * * * * * * Program \u00b6 #include <stdio.h> int main (); { int rows , i , j , space ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = rows ; i >= 1 ; -- i ) { for ( space = 0 ; space < rows - i ; ++ space ) printf ( \" \" ); for ( j = i ; j <= 2 * i - 1 ; ++ j ) printf ( \"* \" ); for ( j = 0 ; j < i - 1 ; ++ j ) printf ( \"* \" ); printf ( \" \\n \" ); } } Program to Print Pascal's triangle \u00b6 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 Program \u00b6 #include <stdio.h> int main (); { int rows , coef = 1 , space , i , j ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 0 ; i < rows ; i ++ ) { for ( space = 1 ; space <= rows - i ; space ++ ) printf ( \" \" ); for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 || i == 0 ) coef = 1 ; else coef = coef * ( i - j + 1 ) / j ; printf ( \"%4d\" , coef ); } printf ( \" \\n \" ); } } Program to Print Floyd's Triangle. \u00b6 1 2 3 4 5 6 7 8 9 10 Program \u00b6 #include <stdio.h> int main (); { int rows , i , j , number = 1 ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%d \" , number ); ++ number ; } printf ( \" \\n \" ); } }","title":"Exercise - 7"},{"location":"Introduction%20to%20C/Exercise-7/#exercise-7","text":"","title":"Exercise - 7"},{"location":"Introduction%20to%20C/Exercise-7/#print-patterns-using-numbers-and-characters","text":"","title":"Print Patterns using *, numbers and characters"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-half-pyramid-using","text":"* * * * * * * * * * * * * * *","title":"Program to print half pyramid using *"},{"location":"Introduction%20to%20C/Exercise-7/#program","text":"#include <stdio.h> int main () { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"* \" ); } printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-half-pyramid-a-using-numbers","text":"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5","title":"Program to print half pyramid a using numbers"},{"location":"Introduction%20to%20C/Exercise-7/#program_1","text":"#include <stdio.h> int main (); { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%d \" , j ); } printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-half-pyramid-using-alphabets-a","text":"A B B C C C D D D D E E E E E","title":"Program to print half pyramid using alphabets A"},{"location":"Introduction%20to%20C/Exercise-7/#program_2","text":"#include <stdio.h> int main (); { int i , j ; char input , alphabet = 'A' ; printf ( \"Enter the uppercase character you want to print in last row: \" ); scanf ( \"%c\" , & input ); for ( i = 1 ; i <= ( input - 'A' + 1 ); ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%c\" , alphabet ); } ++ alphabet ; printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#programs-to-print-inverted-half-pyramid-using-and-numbers","text":"* * * * * * * * * * * * * * *","title":"Programs to print inverted half pyramid using * and numbers"},{"location":"Introduction%20to%20C/Exercise-7/#program_3","text":"#include <stdio.h> int main (); { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = rows ; i >= 1 ; -- i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"* \" ); } printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-inverted-half-pyramid-using-numbers","text":"1 2 3 4 5 1 2 3 4 1 2 3 1 2 1","title":"Program to Inverted half pyramid using numbers"},{"location":"Introduction%20to%20C/Exercise-7/#program_4","text":"#include <stdio.h> int main (); { int i , j , rows ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = rows ; i >= 1 ; -- i ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%d \" , j ); } printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#programs-to-display-pyramid-and-inverted-pyramid-using-and-digits","text":"","title":"Programs to display pyramid and inverted pyramid using * and digits"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-full-pyramid-using","text":"* * * * * * * * *","title":"Program to print full pyramid using *"},{"location":"Introduction%20to%20C/Exercise-7/#program_5","text":"#include <stdio.h> int main (); { int i , space , rows , k = 0 ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i , k = 0 ) { for ( space = 1 ; space <= rows - i ; ++ space ) { printf ( \" \" ); } while ( k != 2 * i - 1 ) { printf ( \"* \" ); ++ k ; } printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-pyramid-using-numbers","text":"1 2 3 2 3 4 5 4 3 4 5 6 7 6 5 4 5 6 7 8 9 8 7 6 5","title":"Program to print pyramid using numbers"},{"location":"Introduction%20to%20C/Exercise-7/#program_6","text":"#include <stdio.h> int main (); { int i , space , rows , k = 0 , count = 0 , count1 = 0 ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; ++ i ) { for ( space = 1 ; space <= rows - i ; ++ space ) { printf ( \" \" ); ++ count ; } while ( k != 2 * i - 1 ) { if ( count <= rows - 1 ) { printf ( \"%d \" , i + k ); ++ count ; } else { ++ count1 ; printf ( \"%d \" , ( i + k - 2 * count1 )); } ++ k ; } count1 = count = k = 0 ; printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-inverted-full-pyramid-using","text":"* * * * * * * * * * * * * * * *","title":"Program to Inverted full pyramid using *"},{"location":"Introduction%20to%20C/Exercise-7/#program_7","text":"#include <stdio.h> int main (); { int rows , i , j , space ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = rows ; i >= 1 ; -- i ) { for ( space = 0 ; space < rows - i ; ++ space ) printf ( \" \" ); for ( j = i ; j <= 2 * i - 1 ; ++ j ) printf ( \"* \" ); for ( j = 0 ; j < i - 1 ; ++ j ) printf ( \"* \" ); printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-pascals-triangle","text":"1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1","title":"Program to Print Pascal's triangle"},{"location":"Introduction%20to%20C/Exercise-7/#program_8","text":"#include <stdio.h> int main (); { int rows , coef = 1 , space , i , j ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 0 ; i < rows ; i ++ ) { for ( space = 1 ; space <= rows - i ; space ++ ) printf ( \" \" ); for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 || i == 0 ) coef = 1 ; else coef = coef * ( i - j + 1 ) / j ; printf ( \"%4d\" , coef ); } printf ( \" \\n \" ); } }","title":"Program"},{"location":"Introduction%20to%20C/Exercise-7/#program-to-print-floyds-triangle","text":"1 2 3 4 5 6 7 8 9 10","title":"Program to Print Floyd's Triangle."},{"location":"Introduction%20to%20C/Exercise-7/#program_9","text":"#include <stdio.h> int main (); { int rows , i , j , number = 1 ; printf ( \"Enter number of rows: \" ); scanf ( \"%d\" , & rows ); for ( i = 1 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; ++ j ) { printf ( \"%d \" , number ); ++ number ; } printf ( \" \\n \" ); } }","title":"Program"}]}